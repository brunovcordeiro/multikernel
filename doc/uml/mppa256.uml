@startuml

!include hal.uml

scale 3840*2160

remove HAL.CoreTypes

namespace mppa256 {
	class Core {
		- pthread_t threads[]
		- pthread_mutex_t lock
		- const int NR_IOCLUSTER_CORES
		- const int NR_CCLUSTER_CORES
		~ const int CCLUSTER0
		~ const int CCLUSTER1
		~ const int CCLUSTER2
		~ const int CCLUSTER3
		~ const int CCLUSTER4
		~ const int CCLUSTER5
		~ const int CCLUSTER6
		~ const int CCLUSTER7
		~ const int CCLUSTER8
		~ const int CCLUSTER9
		~ const int CCLUSTER10
		~ const int CCLUSTER11
		~ const int CCLUSTER12
		~ const int CCLUSTER13
		~ const int CCLUSTER14
		~ const int CCLUSTER15
		~ const int IOCLUSTER0
		~ const int IOCLUSTER1
		- void mppa256_core_lock(void)
		- void mppa256_core_unlock(void)
		~ int mppa256_is_ccluster(int)
		~ int mpp256_is_iocluster(int)
		~ int mppa256_get_cluster_id(void)
		~ void mppa256_core_setup(void)
		~ void mpp256_core_cleanup(void)
	}

	class NoC {
		- const int NR_CCLUSTER_DMA
		- const int NR_IOCLUSTER_DMA
		~ int noctag_mailbox(int)
		~ int noctag_sync(int)
		~ int noctag_portal(int)
		~ int noc_get_node_num(int)
		~ void noc_get_remotes(char *, int)
		~ void noc_get_names(char *, const int *, int)
		~ int noc_get_dma(int)
		~ int noc_is_ionode(int)
		~ int noc_is_ionode0(int)
		~ int noc_is_ionode1(int)
		~ int noc_is_cnode(int)
	}

	namespace Sync {
		enum SyncFlags {
			~ SYNC_FLAGS_USED
			~ SYNC_FLAGS_BROADCAST
			~ SYNC_FLAGS_WRONLY
			~ SYNC_FLAGS_BUSY
		}

		class Sync {
			- int flags
			~ int fd 
			~ int ncount
			~ int sync_is_valid(int syncid)
			~ int sync_is_used(int syncid)
			~ int sync_is_wronly(int syncid)
			~ int sync_is_busy(int syncid)
			~ int sync_is_broadcast(int syncid)
			~ void sync_set_used(int syncid)
			~ void sync_set_wronly(int syncid)
			~ void sync_set_busy(int syncid)
			~ void sync_set_broadcast(int syncid)
			~ void sync_clear_busy(int syncid)
			~ void sync_clear_flags(int syncid)
		}

		class SyncOperations {
			- int sync_alloc(void)
			- void sync_free(int syncid)
			- void sync_ranks(int *ranks, const int *nodes, int nnodes)
		}

		Sync               ..> SyncFlags          : <<use>>
		SyncOperations "1" *-- "HAL_NR_SYNC" Sync : synctab
	}

	namespace Mailbox {
		enum MailboxFlags {
			~ MAILBOX_FLAGS_USED
			~ MAILBOX_FLAGS_WRONLY
			~ MAILBOX_FLAGS_BUSY
		}

		class Mailbox {
			- int flags
			~ int fd 
			~ int mailbox_is_valid(int mbxid)
			~ int mailbox_is_used(int mbxid)
			~ int mailbox_is_wronly(int mbxid)
			~ int mailbox_is_busy(int mbxid)
			~ void mailbox_set_used(int mbxid)
			~ void mailbox_set_wronly(int mbxid)
			~ void mailbox_set_busy(int mbxid)
			~ void mailbox_clear_busy(int mbxid)
			~ void mailbox_clear_flags(int mbxid)
		}

		class MailboxOperations {
			- int mailbox_alloc(void)
			- void mailbox_free(int mbxid)
			- void mailbox_ranks(int *ranks, const int *nodes, int nnodes)
		}

		Mailbox               ..> MailboxFlags             : <<use>>
		MailboxOperations "1" *-- "HAL_NR_MAILBOX" Mailbox : mailboxes
	}

	namespace Portal {
		enum PortalFlags {
			~ PORTAL_FLAGS_USED
			~ PORTAL_FLAGS_WRONLY
			~ PORTAL_FLAGS_BUSY
		}

		class Portal {
			- int flags
			~ int portal_fd
			~ int sync_fd
			~ int remote
			~ int local
			~ int portal_is_valid(int portalid)
			~ int portal_is_used(int portalid)
			~ int portal_is_wronly(int portalid)
			~ int portal_is_busy(int portalid)
			~ void portal_set_used(int portalid)
			~ void portal_set_wronly(int portalid)
			~ void portal_set_busy(int portalid)
			~ void portal_clear_busy(int portalid)
			~ void portal_clear_flags(int portalid)
		}

		class PortalOperations {
			- int portal_alloc(void)
			- void portal_free(int portalid)
		}

		Portal               ..> PortalFlags            : <<use>>
		PortalOperations "1" *-- "HAL_NR_PORTAL" Portal : portals
	}

	kernel.mppa256.Sync    ..> kernel.mppa256.NoC  : <<use>>
	kernel.mppa256.Mailbox ..> kernel.mppa256.NoC  : <<use>>
	kernel.mppa256.Portal  ..> kernel.mppa256.NoC  : <<use>>
	kernel.mppa256.NoC     ..> kernel.mppa256.Core : <<use>>
	kernel.mppa256.Setup   ..> kernel.mppa256.Core : <<use>>
}

kernel.mppa256.Core ..> "<pthread>"         : <<use>>
kernel.mppa256.Core ..> "<kernel.HAL/hal/core/mp>" : <<use>>

kernel.mppa256.NoC ..> "<nanvix/klib>"        : <<use>>
kernel.mppa256.NoC ..> "<nanvix/klib>"        : <<use>>
kernel.mppa256.NoC ..> "<nanvix/klib>"  : <<use>>

kernel.mppa256.Sync ..> "<nanvix/klib>"    : <<use>>
kernel.mppa256.Sync ..> "<inttypes>" : <<use>>
kernel.mppa256.Sync ..> "<mppaipc>"  : <<use>>
kernel.mppa256.Sync ..> "<pthread>"  : <<use>>
kernel.mppa256.Sync ..> "<nanvix/klib>"    : <<use>>
kernel.mppa256.Sync ..> "<nanvix/klib>"    : <<use>>

kernel.mppa256.Mailbox ..> "<nanvix/klib>"    : <<use>>
kernel.mppa256.Mailbox ..> "<mppaipc>"  : <<use>>
kernel.mppa256.Mailbox ..> "<pthread>"  : <<use>>
kernel.mppa256.Mailbox ..> "<nanvix/klib>"    : <<use>>

kernel.mppa256.Portal ..> "<nanvix/klib>"    : <<use>>
kernel.mppa256.Portal ..> "<inttypes>" : <<use>>
kernel.mppa256.Portal ..> "<mppaipc>"  : <<use>>
kernel.mppa256.Portal ..> "<pthread>"  : <<use>>
kernel.mppa256.Portal ..> "<nanvix/klib>"    : <<use>>

kernel.HAL.SetupInterface    <|.. kernel.mppa256.Setup   : <<implements>>
kernel.HAL.NoCInterface      <|.. kernel.mppa256.NoC     : <<implements>>
kernel.HAL.CoreInterface     <|.. kernel.mppa256.Core    : <<implements>>
kernel.HAL.MailboxInterface  <|.. kernel.mppa256.Mailbox : <<implements>>
kernel.HAL.SyncInterface     <|.. kernel.mppa256.Sync    : <<implements>>
kernel.HAL.PortalInterface   <|.. kernel.mppa256.Portal  : <<implements>>
kernel.HAL.PortalInterface   <|.. kernel.mppa256.Timer   : <<implements>>

@enduml

